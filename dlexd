#!/usr/bin/env/ python3
"""
dlex daemon
"""
import argparse
import logging
import sys
from collections import defaultdict
import os

import daemon
import daemon.pidfile
import unix_rpc
import db

class Tracker(object):
    def __init__(self, db_path='test.db'):
        self.ddb = db.DLEXDB(db_path)
        self.status = defaultdict(lambda: {})

    def done(self, exp_id, pid):
        assert exp_id in self.status
        assert self.status[exp_id]['pid'] == pid
        self.status[exp_id]['pid'] = None
        print('experiment %s done' % exp_id)

    def running(self, exp_id, pid):
        self.status[exp_id]['pid'] = pid
        assert self.ddb.set_pid(exp_id, pid)
        print('Experiment %s running as pid %s' % (exp_id, pid))

def run_server(socket_path):
    tracker = Tracker()
    server = unix_rpc.Server(socket_path)
    server.register('running', tracker.running)
    server.register('done', tracker.done)
    server.start()

def main(): # pylint: disable=missing-docstring
    parser = argparse.ArgumentParser(description='dlex daemon')

    parser.add_argument('-d', action='store_true', default=False, help='run as daemon')

    parser.add_argument(
        '-p',
        '--pid-path',
        default='/tmp/dlexd.pid',
        help='daemon pid path')

    parser.add_argument(
        '-s',
        '--socket-path',
        default='/tmp/sock_path',
        help='daemon socket path')

    args = parser.parse_args()

    log = logging.getLogger('dlexd')
    log.setLevel(logging.DEBUG)

    context = daemon.DaemonContext(
        pidfile=daemon.pidfile.PIDLockFile(args.pid_path),
        detach_process=args.d,
        stdout=sys.stdout,
        stderr=sys.stderr,
        umask=2,
        working_directory=os.getcwd()
    )
    with context:
        run_server(args.socket_path)

if __name__ == '__main__':
    main()
